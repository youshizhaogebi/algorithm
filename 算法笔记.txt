算法笔记

一、数组
双指针（用于数组、字符串、链表）
滑动窗口
哈希表（表存储出现频率）
前缀和，计算前缀和数组，相减得到区间和
模拟，打印特定规律图形（循环不变量，统一前开后闭）



二、链表
基本操作见 models/listnode.go
涉及多条链表，要考虑双指针各自走的步数



三、哈希表
当需要查询一个元素是否出现过，或者一个元素是否在集合里的时候使用哈希表
基本操作见 models/hashmap.go

只有小写字母时，不用哈希表用数组



四、字符串
string 和 []byte 有区别
初始化也有区别：
var start []byte  // 声明一个空的 []byte 切片，默认值为 nil
start := []byte{}  // 初始化一个长度为 0 的空切片



五、栈、队列
append() 会影响底层数组容量

栈实现队列：实现栈后，队列结构体需要一个输入栈，一个输出栈

队列实现栈：
一个队列实现：插入后要重新排序保证在队列最前面；
两个队列实现：其中一个用来备份 queue1 除最后一个元素以外的元素
Push() 和 Pop() 时间复杂度不同

优先级队列：
相当于最小堆（完全二叉树，堆顶为最小值，节点小于子节点）

Go 语言的标准库 container 包下提供堆、双向链表、循环链表
1. container/heap：提供了堆（优先级队列）的接口与操作。
简介：堆是一种特殊的完全二叉树结构，用于高效地实现优先级队列，主要支持 Push（插入）和 Pop（移除最大或最小值）操作。
使用场景：在需要快速获取最小值或最大值时很有用，如实现优先级队列、排序算法等。
方法：
heap.Init(): 初始化堆。
heap.Push(): 向堆中插入元素。
heap.Pop(): 从堆中移除并返回最小/最大值。

2. container/list：提供了双向链表的实现。
简介：双向链表是一种链表结构，每个节点都包含指向上一个和下一个节点的指针。
使用场景：当需要频繁的插入和删除操作时，比数组更高效，如缓存、队列、双端队列等。
方法：
list.PushBack() 和 list.PushFront(): 分别向链表的尾部和头部添加元素。
list.Remove(): 从链表中删除指定元素。
list.Len(): 获取链表的长度。

3. container/ring：提供了循环链表的实现。
简介：循环链表是指链表的尾节点指向头节点，从而形成一个循环结构。
使用场景：当需要循环遍历、循环缓冲区等功能时，使用循环链表会很方便。
方法：
ring.Next(): 获取下一个节点。
ring.Move(n): 将链表移动 n 个位置。
ring.Do(f): 对链表中的每个元素执行指定的操作。



六、二叉树
主要形式：满二叉树，完全二叉树（仅最下面一层没满，最下面一层节点集中在左侧）
搜索树：每个节点的子节点，左小右大
平衡搜索树（AVL）：搜索树，且左右子树高度差不超过 1

二叉树遍历方式：
深度优先（递归法，迭代法）：根据遍历到根节点的顺序分为前、中、后序遍历
前序遍历从根->左子树->右子树，中序遍历左->根->右，后序遍历左->右->根
栈、递归实现遍历

广度优先（迭代法）：从上到下、从左到右
队列实现遍历



七、递归
递归方法论，根据三要素写：
1. 确定递归函数的参数和返回值
2. 确定终止条件
3. 确定单层递归的逻辑



常用容器底层实现（用于分析复杂度）：
map：

set：