# 算法

数组：
双指针（用于数组、字符串、链表）
滑动窗口
哈希表（表存储出现频率）
前缀和，计算前缀和数组，相减得到区间和
模拟，打印特定规律图形（循环不变量，统一前开后闭）



链表：
基本操作见 models/listnode.go
涉及多条链表，要考虑双指针各自走的步数



哈希表：
当需要查询一个元素是否出现过，或者一个元素是否在集合里的时候使用哈希表
基本操作见 models/hashmap.go

只有小写字母时，不用哈希表用数组



字符串：
string 和 []byte 有区别
初始化也有区别：
var start []byte  // 声明一个空的 []byte 切片，默认值为 nil
start := []byte{}  // 初始化一个长度为 0 的空切片



栈、队列：
是否传入指针？
栈传入指针，修改了切片底层数组的容量
队列不传入指针，出队只改变了切片起始位置，没有影响底层数组

append() 会动态影响容量

栈实现队列：实现栈后，队列结构体需要一个输入栈，一个输出栈

队列实现栈：
一个队列实现：插入后要重新排序保证在队列最前面；
两个队列实现：其中一个用来备份 queue1 除最后一个元素以外的元素
Push() 和 Pop() 时间复杂度不同